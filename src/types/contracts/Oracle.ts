/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addConnector"
      | "addOracle"
      | "connectors"
      | "getRate"
      | "getRateToEth"
      | "multiWrapper"
      | "oracles"
      | "owner"
      | "removeConnector"
      | "removeOracle"
      | "renounceOwnership"
      | "setMultiWrapper"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConnectorAdded"
      | "ConnectorRemoved"
      | "MultiWrapperUpdated"
      | "OracleAdded"
      | "OracleRemoved"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addConnector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addOracle",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRate",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRateToEth",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "multiWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracles", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeConnector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOracle",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiWrapper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRateToEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ConnectorAddedEvent {
  export type InputTuple = [connector: AddressLike];
  export type OutputTuple = [connector: string];
  export interface OutputObject {
    connector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConnectorRemovedEvent {
  export type InputTuple = [connector: AddressLike];
  export type OutputTuple = [connector: string];
  export interface OutputObject {
    connector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultiWrapperUpdatedEvent {
  export type InputTuple = [multiWrapper: AddressLike];
  export type OutputTuple = [multiWrapper: string];
  export interface OutputObject {
    multiWrapper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleAddedEvent {
  export type InputTuple = [oracle: AddressLike, oracleType: BigNumberish];
  export type OutputTuple = [oracle: string, oracleType: bigint];
  export interface OutputObject {
    oracle: string;
    oracleType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleRemovedEvent {
  export type InputTuple = [oracle: AddressLike, oracleType: BigNumberish];
  export type OutputTuple = [oracle: string, oracleType: bigint];
  export interface OutputObject {
    oracle: string;
    oracleType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Oracle extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: OracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addConnector: TypedContractMethod<
    [connector: AddressLike],
    [void],
    "nonpayable"
  >;

  addOracle: TypedContractMethod<
    [oracle: AddressLike, oracleKind: BigNumberish],
    [void],
    "nonpayable"
  >;

  connectors: TypedContractMethod<[], [string[]], "view">;

  getRate: TypedContractMethod<
    [srcToken: AddressLike, dstToken: AddressLike, useWrappers: boolean],
    [bigint],
    "view"
  >;

  getRateToEth: TypedContractMethod<
    [srcToken: AddressLike, useSrcWrappers: boolean],
    [bigint],
    "view"
  >;

  multiWrapper: TypedContractMethod<[], [string], "view">;

  oracles: TypedContractMethod<
    [],
    [[string[], bigint[]] & { allOracles: string[]; oracleTypes: bigint[] }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeConnector: TypedContractMethod<
    [connector: AddressLike],
    [void],
    "nonpayable"
  >;

  removeOracle: TypedContractMethod<
    [oracle: AddressLike, oracleKind: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMultiWrapper: TypedContractMethod<
    [_multiWrapper: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addConnector"
  ): TypedContractMethod<[connector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addOracle"
  ): TypedContractMethod<
    [oracle: AddressLike, oracleKind: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "connectors"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRate"
  ): TypedContractMethod<
    [srcToken: AddressLike, dstToken: AddressLike, useWrappers: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRateToEth"
  ): TypedContractMethod<
    [srcToken: AddressLike, useSrcWrappers: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "multiWrapper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oracles"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { allOracles: string[]; oracleTypes: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeConnector"
  ): TypedContractMethod<[connector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeOracle"
  ): TypedContractMethod<
    [oracle: AddressLike, oracleKind: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMultiWrapper"
  ): TypedContractMethod<[_multiWrapper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ConnectorAdded"
  ): TypedContractEvent<
    ConnectorAddedEvent.InputTuple,
    ConnectorAddedEvent.OutputTuple,
    ConnectorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ConnectorRemoved"
  ): TypedContractEvent<
    ConnectorRemovedEvent.InputTuple,
    ConnectorRemovedEvent.OutputTuple,
    ConnectorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MultiWrapperUpdated"
  ): TypedContractEvent<
    MultiWrapperUpdatedEvent.InputTuple,
    MultiWrapperUpdatedEvent.OutputTuple,
    MultiWrapperUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OracleAdded"
  ): TypedContractEvent<
    OracleAddedEvent.InputTuple,
    OracleAddedEvent.OutputTuple,
    OracleAddedEvent.OutputObject
  >;
  getEvent(
    key: "OracleRemoved"
  ): TypedContractEvent<
    OracleRemovedEvent.InputTuple,
    OracleRemovedEvent.OutputTuple,
    OracleRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ConnectorAdded(address)": TypedContractEvent<
      ConnectorAddedEvent.InputTuple,
      ConnectorAddedEvent.OutputTuple,
      ConnectorAddedEvent.OutputObject
    >;
    ConnectorAdded: TypedContractEvent<
      ConnectorAddedEvent.InputTuple,
      ConnectorAddedEvent.OutputTuple,
      ConnectorAddedEvent.OutputObject
    >;

    "ConnectorRemoved(address)": TypedContractEvent<
      ConnectorRemovedEvent.InputTuple,
      ConnectorRemovedEvent.OutputTuple,
      ConnectorRemovedEvent.OutputObject
    >;
    ConnectorRemoved: TypedContractEvent<
      ConnectorRemovedEvent.InputTuple,
      ConnectorRemovedEvent.OutputTuple,
      ConnectorRemovedEvent.OutputObject
    >;

    "MultiWrapperUpdated(address)": TypedContractEvent<
      MultiWrapperUpdatedEvent.InputTuple,
      MultiWrapperUpdatedEvent.OutputTuple,
      MultiWrapperUpdatedEvent.OutputObject
    >;
    MultiWrapperUpdated: TypedContractEvent<
      MultiWrapperUpdatedEvent.InputTuple,
      MultiWrapperUpdatedEvent.OutputTuple,
      MultiWrapperUpdatedEvent.OutputObject
    >;

    "OracleAdded(address,uint8)": TypedContractEvent<
      OracleAddedEvent.InputTuple,
      OracleAddedEvent.OutputTuple,
      OracleAddedEvent.OutputObject
    >;
    OracleAdded: TypedContractEvent<
      OracleAddedEvent.InputTuple,
      OracleAddedEvent.OutputTuple,
      OracleAddedEvent.OutputObject
    >;

    "OracleRemoved(address,uint8)": TypedContractEvent<
      OracleRemovedEvent.InputTuple,
      OracleRemovedEvent.OutputTuple,
      OracleRemovedEvent.OutputObject
    >;
    OracleRemoved: TypedContractEvent<
      OracleRemovedEvent.InputTuple,
      OracleRemovedEvent.OutputTuple,
      OracleRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
